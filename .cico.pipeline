def onmyduffynode(script){
    ansiColor('xterm'){
        timestamps{
            sh 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l root ${DUFFY_NODE}.ci.centos.org -t "' + script + '"'
        }
    }
}

def syncfromduffynode(rsyncpath){
    sh 'rsync -e "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l root " -Ha --include=' +  rsyncpath +  " ${DUFFY_NODE}.ci.centos.org:~/ ./"
}

def notifyBuild(String buildStatus = 'STARTED') {
    buildStatus =  buildStatus ?: 'SUCCESSFUL'
    emailext body: "${env.EMAIL_BODY}", subject: "Fedora-Modular-Bikeshed: FAIL: ${env.FAILED_MOD} of ${env.TOTAL_PROFILES} profiles", to: 'igulina@redhat.com'
}

node('fedora-qa'){
    environment { 
        EMAIL_BODY = ' '
        FAILED_MOD = ' '
        TOTAL_PROFILES = ' '
        MY_URL = ' '
    }
    
    
    stage('Allocate Node'){
        env.CICO_API_KEY = readFile("${env.HOME}/duffy.key").trim()
        duffy_rtn=sh(
            script: 'cico --debug node get -f value -c hostname -c comment',
            returnStdout: true
            ).trim().tokenize(' ')
        env.DUFFY_NODE=duffy_rtn[0]
        env.SSID=duffy_rtn[1]
    }

    try{
        stage('Pre Setup Node'){
            onmyduffynode 'yum -y install git ansible'
        }
        /*
        stage('Build') {

        sh '''curl -sb -H "Accept: application/json" "https://kojipkgs.fedoraproject.org/compose/latest-Fedora-Modular-26/STATUS" | grep FINISHED'''
        def response = httpRequest 'https://kojipkgs.fedoraproject.org/compose/latest-Fedora-Modular-26/STATUS'
        println("Content: "+response.content)
        assert response.content == "FINISHED\n": "The Build status is not FINISHED, aborting."

        }
        */

        stage('git clone Tests') {
            onmyduffynode '''git clone "https://github.com/fedora-modularity/compose-tests.git"'''
        }

        stage('Setup Environment') {
            onmyduffynode '''cd compose-tests &&
            ansible-playbook deploy.yaml --extra-vars "compose=jamesantill/boltron-27" --tags env_setup'''
        }

        stage('Pull Image') {
            onmyduffynode '''cd compose-tests &&
            ansible-playbook deploy.yaml --extra-vars "compose=jamesantill/boltron-27" --tags pull_image'''
        }

        stage('Create Container') {
            onmyduffynode '''cd compose-tests &&
            ansible-playbook deploy.yaml --extra-vars "compose=jamesantill/boltron-27" --tags create_container'''
        }

        stage('Mini test') {
            onmyduffynode '''cd compose-tests &&
            ansible-playbook deploy.yaml --extra-vars "compose=jamesantill/boltron-27" --tags mini | tee output.log'''
        }

        stage('Module Install ALL') {
            onmyduffynode '''cd compose-tests &&
            ansible-playbook deploy.yaml --extra-vars "compose=jamesantill/boltron-27" --tags modules_install | tee -a output.log'''
        }

        /*
        stage('Module Update') {
            onmyduffynode '''cd compose-tests &&
            ansible-playbook deploy.yaml --extra-vars "compose=jamesantill/boltron-27" --tags modules_update | tee -a output.log'''
        }
        */
        stage('Parse Logs') {
            onmyduffynode '''cd compose-tests &&
            sed -n \'/^TASK/{ x; /failed:/p; d; }; /failed:/H; \\${ x; /failed:/p; }\' output.log >> raw_error.log &&
            bash tests/error.sh &&
            bash tests/parse_output.sh tests/f27_modules.yaml >> mod_install_results.log &&
            echo ---------------------------------------------------------------------- >> mod_install_results.log &&
            echo [0] ${BUILD_URL}artifact/compose-tests/test_results.html >> mod_install_results.log &&
            echo [1] ${BUILD_URL}artifact/compose-tests/error.log >> mod_install_results.log &&
            echo [2] ${BUILD_URL}artifact/compose-tests/output.log >> mod_install_results.log &&
            if [[ -s error.log ]]; then exit 1; fi'''
        }

    }catch (e){
        currentBuild.result = "FAILED"
        throw e 
    } finally {
        try {
            stage('Archive the Logs'){
                println("Print my id: "+currentBuild.id) 
                //sh(script:'echo "${currentBuild.id}" >> mod_install_results.log', returnStdout: true)
                syncfromduffynode('*.log')
                syncfromduffynode('*.html')
                syncfromduffynode('compose-tests/css/*.css')
                archiveArtifacts('compose-tests/*.log')
                archiveArtifacts('compose-tests/*.html')
                archiveArtifacts('compose-tests/css/*.css')
                env.EMAIL_BODY = readFile('compose-tests/mod_install_results.log').trim()
                env.FAILED_MOD = sh(script: 'grep -oP ".*?(?= =>)" compose-tests/error.log | sed s,/default,, | sort | uniq | wc -l', returnStdout: true)
                env.TOTAL_PROFILES = sh(script: 'sed s,/default,, compose-tests/tests/f27_modules_all_profiles.yaml | sort | uniq | wc -l', returnStdout: true)

            }
        } catch (e){
            currentBuild.result = "FAILED"
            throw e
        } finally {
            stage('Deallocate Node'){
                sh 'cico node done ${SSID}'
            }
            stage('Notify Recipients'){
                notifyBuild(currentBuild.result)
            }
        }
    }
}
